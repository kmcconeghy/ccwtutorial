---
title: "Simulate data for CCW project"
bibliography: references.bib
---

```{r }
#| label: setup
#| echo: false
#| message: false
#| 
library(here)
library(ggdag)
library(corrplot)

source(here('scripts', 'setup.R'), echo=F)
# Set seed for reproducibility
set.seed(42)
```

# Causal Directed Acyclic Graph  

We assume a generic treatment, A, has no causal effect on generic outcome, Y. However, confounding is present through another random variable. The DAG includes `age`, `X` a confounder, gender defined through a binary variable `F` for female. X is both a baseline variable, and a time-varying confounder. Below we assign effects of these variables that will lead to identification of a causal effect between A and Y, if no controlling for the confounding is done. 

```{r }
#| label: gg-dag
#| fig-cap: "Figure 1. Causal DAG of treatment and outcome"
#| fig-cap-location: top
#| message: false
#| warning: false
#| echo: false
#| 
outc_treat_dag <- dagify(
  Y ~ Age,
  Y ~ F,
  A ~ X,
  Y ~ X,
  labels = c(
    "Age" = "Age",
    "F" = "Female",
    "A" = "Treatment",
    "Y" = "Outcome",
    "X" = "X"
  ),
  exposure = "A",
  outcome = "Y"
)

ggdag(outc_treat_dag, text = FALSE, use_labels = "label") +
  theme_dag()
```

If a naive analysis (no adjustment) was performed the estimate will be biased, because treatment and outcome are d-connected.  

```{r }
#| label: gg-dag-dsep
#| fig-cap: "Figure 2. D-connected treatment and outcome"
#| fig-cap-location: top
#| message: false
#| warning: false
#| echo: false
#| 
ggdag_dseparated(outc_treat_dag, text = FALSE, use_labels = "label") +
  theme_dag()
```

```{r }
#| label: gg-dag-dsep-2
#| fig-cap: "Figure 3. D-separated treatment and outcome after adjustment"
#| fig-cap-location: top
#| message: false
#| warning: false
#| echo: false


ggdag_dseparated(outc_treat_dag, text = FALSE, use_labels = "label",
                 controlling_for = c('X')) +
  theme_dag()

```

Adjustment for X, Age and M should lead to identification of a *NULL* effect of treatment on outcome.

# Simulation Parameters {#sec-simparams} 

```{r }
#| label: sim-startdta
#| message: false
#| warning: false
#| 

n = 1000L # <1>
fup = 90 # <1>

df = tibble(id = 1:n, 
            age = round(rnorm(n, mean = 75, sd = 10), 1), # <2> 
            female = sample(c(1, 0), size = n, replace = TRUE, prob = c(0.66, 0.34)), # <2>
            fup = fup, 
            X = rnorm(n, 0, sd=1), 
            X_shift = rexp(n, rate=0.005))
  
setDT(df) 

d_panel = df[rep(seq(.N), fup)] # <3> 
d_panel[, exit := (seq_len(.N)), by = list(id)] # <3>
d_panel[, enter := exit-1] # <3> 
d_panel[, time := seq_len(.N), by = list(id)] # <3>
```

1. Specify `r n` individuals with `r fup` observation periods of follow-up. 
2. Specify covariates, `age`, `female` and `X`.
3. Expand dataset, each observation period is an interval of length = 1.

For X, I specify a binary variable representing a diagnosis of a condition which increases likelihood of treatment and outcome. Once diagnosed, X is always 1. So the time-varying confounder increases in prevalence across time.  

```{r }
#| label: sim-tvarydata
#| message: false
#| warning: false
#| 

d_panel[, X_t := fifelse(X_shift <= time, X+rnorm(n=1), X), by = list(id)] 

```

```{r }
#| label: gg-tvary
#| fig-cap: "Figure 4. Distribution of Time-varying Confounder"
#| fig-cap-location: top
#| 
d_panel %>%
  group_by(time) %>%
  summarize(Xt_prob = mean(X_t),
            X = mean(X)) %>%
  ggplot(aes(x = time, y = Xt_prob)) +
  geom_line() +
  geom_point() +
  geom_hline(aes(yintercept = X), color = 'red', linetype = 2) +
  labs(x = 'Follow-up', y = 'Mean(X)', caption = 'Red line is baseline prevalence') +
  theme_bw()
```

Using a weibull distribution, time to treatment and outcome is simulated. Then the dataset is modified so that persons follow-up ends at the time of event.  

```{r }
#| label: sim-treatoutc
#| message: false
#| warning: false

  d_panel[, log_odds := -5.5 + time*0.008 + time^2*0.0001 + X*0.5 + X_t*0.7]
  d_panel[, p := exp(log_odds) / (1 + exp(log_odds))]
  d_panel[, c_p0 := cumprod(1-p), by = list(id)]
  d_panel[, treat := rbinom(.N, size = 1, prob = p)]
  d_panel[, treat := fifelse(treat==1, 1, NA_integer_)]
  d_panel[, treat := nafill(treat, type = 'locf'), by=list(id)]
  d_panel[, treat := fifelse(is.na(treat), 0, treat)]

  d_panel[, log_odds := -5.5 + time*0.003 + time^2*-0.0002 + 
                                  0.5*X + 0.7*X_t + 
                                  -0.3 * female + 0.0001 * age + 0.00005 * age^2]
  d_panel[, p := exp(log_odds) / (1 + exp(log_odds))]
  d_panel[, c_p0 := cumprod(1-p), by = list(id)]
  d_panel[, outcome := rbinom(.N, size = 1, prob = p)]
  d_panel[, outcome := fifelse(outcome==1, 1, NA_integer_)]
  d_panel[, outcome := nafill(outcome, type = 'locf'), by=list(id)]
  d_panel[, outcome := fifelse(is.na(outcome), 0, outcome)]
  
  d_panel[, t_outcome := min(time[outcome==1]), by = list(id)]
  d_panel[, t_treat := coalesce(min(time[treat==1]), Inf), by = list(id)]
  d_panel = d_panel[t_outcome >= time, ]
```

```{r }
#| label: gg-treatoutc
#| fig-cap: "Figure 5. Treatment and Outcome Prevalance Across Follow-up"
#| fig-cap-location: top
#| message: false
#| warning: false
gg_treat = d_panel %>%
  group_by(time) %>%
  summarize(treat_prob = mean(treat)) %>%
  ggplot(aes(x = time, y = treat_prob)) +
  geom_line() +
  scale_y_continuous(limits = c(0, 1)) +
  labs(x = 'Follow-up', y = 'Proportion treated', title = 'Treatment') +
  theme_bw()

gg_outc = d_panel %>%
  group_by(time) %>%
    summarize(outcome = sum(outcome),
              n = n()) %>%
  ungroup %>%
    mutate(outcome_prob = cumsum(outcome)/n) %>%
  ggplot(aes(x = time, y = outcome_prob)) +
  geom_line() +
  scale_y_continuous(limits = c(0, 1)) +
  labs(x = 'Follow-up', y = 'Proportion outcome', title = 'Outcome') +
  theme_bw()

ggarrange(gg_treat, gg_outc, ncol = 1)
```

```{r }
#| label: gg-treatoutc
#| fig-cap: "Figure 6. Correlation plot of covariates, treatment, outcome"
#| fig-cap-location: top
#| message: false
#| warning: false
#| 
corrplot(cor(d_panel[, c('age', 'female', 'X', 'X_t', 'treat', 'outcome')]),
         method = 'number', diag=F, type='upper')
```

# Summary of survival dataset {#sec-summdta}

```{r }
#| label: glimpse-survdta
#| echo: false

glimpse(d_panel)
```

# Cloning procedure {#sec-cloning}

The cloning procedure is very project specific, tied to how the treatment strategy is defined so it is hard to give general recommendations here. For this tutorial, we describe an arbitrary window in which treatment is expected to initiate and outline strategies around this:

**Treatment Strategies: **
1) Do not ever receive treatment
2) Initiate treatment within 12 time periods (days, weeks etc.) and if not then treatment will initiate on week 12. 

::: callout-note
The grace window is a funny concept when you first consider it. This does not reflect any trial I have ever heard of actually being done but may identify an interesting or important effect. It is essentially outlying a treatment "protocol" and saying what if everyone adhered to this protocol counterfactual to what was observed.
:::

To clone, you make two copies of the data, and make a new `artifical censoring` variable, which is a censoring time for the period when clones observed data are no longer consistent with their assigned strategy.  

```{r }
#| label: clone-dta
#| message: false
#| warning: false
data_cloned = bind_rows( # <1>
                     d_panel %>% # <1>
                       mutate(assign = 0, # <1>
                              censor = if_else(t_treat <= time, 1L, 0L), # <1>
                              event = if_else(censor==0 & t_outcome<=time, 1L, 0L) # <1>
                       ), # <1>
                     d_panel %>% # <2>
                       mutate(assign = 1, # <2>
                              censor = if_else(t_treat > 12 & time>=12, 1L, 0L), # <2>
                              event  = if_else(censor==0 & t_outcome<=time, 1L, 0L)
                              ) # <2>
                       ) %>% # <2>
  arrange(id, assign, time) 
```

1. Clones assigned to strategy 1 (No treatment)
2. Clones assigned to strategy 2 (grace window for treatment)
3. Update failure times and events counting  artificial censoring

```{r }
#| label: sv-personlevel
#| message: false
#| warning: false
#| 
data_cloned_p = data_cloned %>%
  group_by(id, assign) %>%
    mutate(t_censor = min(time[censor==1])) %>%
  ungroup %>%
  mutate(time = pmin(t_censor, t_outcome, 60),
         event = case_when(
           time==t_censor ~ 0, 
           time==t_outcome ~ 1,
           T ~ 0)) %>%
  select(id, assign, t_treat, t_outcome, t_censor, time, event, X, female, age) %>%
  distinct()

saveRDS(data_cloned_p, here('dta', 'dta_cloned_person.Rds'))
```

```{r }
#| label: sv-panel
#| echo: false
d_final = data_cloned %>%
  select(id, time, treat, outcome, assign, censor, event, age, female, fup, X, X_t, enter, exit, t_treat, t_outcome) 
  
saveRDS(d_final,
               here('dta', 'dta_cloned_panel.Rds'))
```